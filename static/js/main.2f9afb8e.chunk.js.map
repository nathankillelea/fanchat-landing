{"version":3,"sources":["assets/phone-tilt.png","assets/phone.png","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","App","useState","submitted","setSubmitted","submit","input","a","collection","doc","email","set","emailSchema","Yup","shape","required","max","className","initialValues","validationSchema","onSubmit","values","actions","setSubmitting","handleChange","handleSubmit","setFieldTouched","isSubmitting","errors","touched","noValidate","style","display","width","justifyContent","flexDirection","alignItems","type","name","placeholder","onChange","value","disabled","src","phone","alt","tilt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAAe,G,MAAA,IAA0B,wCCA1B,MAA0B,kCCoBzCA,IAASC,cAXY,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IAAIC,EAAKV,IAASW,YAsEHC,MApEf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,KAGPC,EAAM,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACPR,EAAGS,WAAW,UAAUC,IAAIH,EAAMI,OAAOC,IAAI,CAACD,MAAOJ,EAAMI,QADpD,2CAAH,sDAINE,EAAcC,MAAaC,MAAM,CACrCJ,MAAOG,MACJE,SAAS,YACTL,MAAM,iBACNM,IAAI,IAAK,eAGd,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,UAAf,UACE,iCACE,+BAAI,6CAAJ,mFAEF,cAAC,IAAD,CACEC,cAAe,CAAER,MAAO,IACxBS,iBAAkBP,EAClBQ,SAAU,SAACC,EAAQC,GACjBA,EAAQC,eAAc,GACtBlB,EAAOgB,GACPC,EAAQC,eAAc,GACtBnB,GAAa,IAPjB,SAUG,gBAAGoB,EAAH,EAAGA,aAA+BC,GAAlC,EAAiBC,gBAAjB,EAAkCD,cAAcE,EAAhD,EAAgDA,aAAcN,EAA9D,EAA8DA,OAAQO,EAAtE,EAAsEA,OAAQC,EAA9E,EAA8EA,QAA9E,OACC,sBAAMT,SAAUK,EAAcK,WAAW,aAAaC,MAAO,CAACC,QAAS,OAAQC,MAAO,OAAQC,eAAgB,UAA9G,SAEK/B,EAmBD,qBAAKc,UAAU,sBAAf,SACE,oBAAIA,UAAU,iBAAd,4FAnBF,sBAAKc,MAAO,CAACC,QAAS,OAAQG,cAAe,SAAUF,MAAO,OAAQG,WAAY,UAAlF,UACE,sBAAKnB,UAAU,gBAAf,UACE,uBACEoB,KAAK,QACLC,KAAK,QACLC,YAAY,sBACZC,SAAUhB,EACViB,MAAOpB,EAAOX,QAEhB,wBAAQ2B,KAAK,SAASK,SAAUf,EAAhC,6BAIF,qBAAKV,UAAU,iBAAf,SACGW,EAAOlB,OAASmB,EAAQnB,MAAQ,mBAAGO,UAAU,YAAb,2BAA6C,oBAa9F,qBAAK0B,IAAKC,EAAO3B,UAAU,QAAQ4B,IAAI,wBACvC,qBAAKF,IAAKG,EAAM7B,UAAU,OAAO4B,IAAI,4BC1E5BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2f9afb8e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/phone-tilt.4c22ef30.png\";","export default __webpack_public_path__ + \"static/media/phone.f82d02aa.png\";","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport tilt from './assets/phone-tilt.png';\r\nimport phone from './assets/phone.png';\r\n\r\nlet firebaseConfig = {\r\n  apiKey: \"AIzaSyATxICEk1ESEIVEV3B_CXjCuOcvs1X252E\",\r\n  authDomain: \"fanchat-landing.firebaseapp.com\",\r\n  databaseURL: \"https://fanchat-landing.firebaseio.com\",\r\n  projectId: \"fanchat-landing\",\r\n  storageBucket: \"fanchat-landing.appspot.com\",\r\n  messagingSenderId: \"469068500331\",\r\n  appId: \"1:469068500331:web:7b8177c1587d1158f3502e\",\r\n  measurementId: \"G-XRWZMBYS4F\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nlet db = firebase.firestore();\r\n\r\nfunction App() {\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const submit = async (input) => {\r\n    await db.collection(\"emails\").doc(input.email).set({email: input.email});\r\n  }\r\n\r\n  const emailSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n      .required('Required')\r\n      .email('Invalid email')\r\n      .max(255, 'Too long!'),\r\n  });\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <div className=\"diagonalBox\">\r\n        <div className=\"content\">\r\n          <header>\r\n            <h1><strong>fanchat</strong> is a subscription-based messaging platform for influencers and their fans.</h1>\r\n          </header>\r\n          <Formik\r\n            initialValues={{ email: '' }}\r\n            validationSchema={emailSchema}\r\n            onSubmit={(values, actions) => {\r\n              actions.setSubmitting(true);\r\n              submit(values);\r\n              actions.setSubmitting(false);\r\n              setSubmitted(true);\r\n            }}\r\n          >\r\n            {({ handleChange, setFieldTouched, handleSubmit, isSubmitting, values, errors, touched }) => (\r\n              <form onSubmit={handleSubmit} noValidate=\"novalidate\" style={{display: 'flex', width: '100%', justifyContent: 'center'}}>\r\n                {\r\n                  !submitted ?\r\n                  <div style={{display: 'flex', flexDirection: 'column', width: '100%', alignItems: 'center'}}>\r\n                    <div className=\"formContainer\">\r\n                      <input\r\n                        type=\"email\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter email address\"\r\n                        onChange={handleChange}\r\n                        value={values.email}\r\n                      />\r\n                      <button type=\"submit\" disabled={isSubmitting}>\r\n                        Get Notified\r\n                      </button>\r\n                    </div>\r\n                    <div className=\"errorContainer\">\r\n                      {errors.email && touched.email ? <p className=\"errorText\">Invalid Email</p> : null}\r\n                    </div>\r\n                  </div>\r\n                  :\r\n                  <div className=\"registeredContainer\">\r\n                    <h2 className=\"registeredText\">Thank you for registering! We will reach out once early access is available.</h2>\r\n                  </div>\r\n                }\r\n              </form>\r\n            )}\r\n          </Formik>\r\n        </div>\r\n      </div>\r\n      <img src={phone} className=\"phone\" alt=\"fanchat application\" />\r\n      <img src={tilt} className=\"tilt\" alt=\"fanchat application\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}