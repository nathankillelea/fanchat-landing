{"version":3,"sources":["assets/phone-tilt.png","assets/phone.png","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","App","useState","submitted","setSubmitted","submit","input","a","collection","doc","email","set","emailSchema","Yup","shape","required","max","className","initialValues","validationSchema","onSubmit","values","actions","setSubmitting","handleChange","handleSubmit","setFieldTouched","isSubmitting","errors","touched","noValidate","style","display","width","justifyContent","flexDirection","alignItems","type","name","placeholder","onChange","value","disabled","src","phone","alt","tilt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAAe,G,MAAA,IAA0B,wCCA1B,MAA0B,kCCoBzCA,IAASC,cAXY,CACnBC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAIjB,IAAIC,EAAKV,IAASW,YAsEHC,MApEf,WAAgB,IAAD,EACqBC,oBAAS,GAD9B,mBACNC,EADM,KACKC,EADL,KAGPC,EAAM,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACPR,EAAGS,WAAW,UAAUC,IAAIH,EAAMI,OAAOC,IAAI,CAACD,MAAOJ,EAAMI,QADpD,2CAAH,sDAINE,EAAcC,MAAaC,MAAM,CACrCJ,MAAOG,MACJE,SAAS,YACTL,MAAM,iBACNM,IAAI,IAAK,eAGd,OACE,sBAAKC,UAAU,MAAf,UACE,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,UAAf,UACE,iCACE,+BAAI,6CAAJ,mFAEF,cAAC,IAAD,CACEC,cAAe,CAAER,MAAO,IACxBS,iBAAkBP,EAClBQ,SAAU,SAACC,EAAQC,GACjBA,EAAQC,eAAc,GACtBlB,EAAOgB,GACPC,EAAQC,eAAc,GACtBnB,GAAa,IAPjB,SAUG,gBAAGoB,EAAH,EAAGA,aAA+BC,GAAlC,EAAiBC,gBAAjB,EAAkCD,cAAcE,EAAhD,EAAgDA,aAAcN,EAA9D,EAA8DA,OAAQO,EAAtE,EAAsEA,OAAQC,EAA9E,EAA8EA,QAA9E,OACC,sBAAMT,SAAUK,EAAcK,WAAW,aAAaC,MAAO,CAACC,QAAS,OAAQC,MAAO,OAAQC,eAAgB,UAA9G,SAEK/B,EAmBD,qBAAKc,UAAU,sBAAf,SACE,oBAAIA,UAAU,iBAAd,4FAnBF,sBAAKc,MAAO,CAACC,QAAS,OAAQG,cAAe,SAAUF,MAAO,OAAQG,WAAY,UAAlF,UACE,sBAAKnB,UAAU,gBAAf,UACE,uBACEoB,KAAK,QACLC,KAAK,QACLC,YAAY,sBACZC,SAAUhB,EACViB,MAAOpB,EAAOX,QAEhB,wBAAQ2B,KAAK,SAASK,SAAUf,EAAhC,6BAIF,qBAAKV,UAAU,iBAAf,SACGW,EAAOlB,OAASmB,EAAQnB,MAAQ,mBAAGO,UAAU,YAAb,2BAA6C,oBAa9F,qBAAK0B,IAAKC,EAAO3B,UAAU,QAAQ4B,IAAI,wBACvC,qBAAKF,IAAKG,EAAM7B,UAAU,OAAO4B,IAAI,4BC1E5BE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.57e48af2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/phone-tilt.ef5b69f2.png\";","export default __webpack_public_path__ + \"static/media/phone.70243702.png\";","import React, {useState} from 'react';\nimport './App.css';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport tilt from './assets/phone-tilt.png';\nimport phone from './assets/phone.png';\n\nlet firebaseConfig = {\n  apiKey: \"AIzaSyATxICEk1ESEIVEV3B_CXjCuOcvs1X252E\",\n  authDomain: \"fanchat-landing.firebaseapp.com\",\n  databaseURL: \"https://fanchat-landing.firebaseio.com\",\n  projectId: \"fanchat-landing\",\n  storageBucket: \"fanchat-landing.appspot.com\",\n  messagingSenderId: \"469068500331\",\n  appId: \"1:469068500331:web:7b8177c1587d1158f3502e\",\n  measurementId: \"G-XRWZMBYS4F\"\n};\n\nfirebase.initializeApp(firebaseConfig);\nlet db = firebase.firestore();\n\nfunction App() {\n  const [submitted, setSubmitted] = useState(false);\n\n  const submit = async (input) => {\n    await db.collection(\"emails\").doc(input.email).set({email: input.email});\n  }\n\n  const emailSchema = Yup.object().shape({\n    email: Yup.string()\n      .required('Required')\n      .email('Invalid email')\n      .max(255, 'Too long!'),\n  });\n\n  return (\n    <div className=\"app\">\n      <div className=\"diagonalBox\">\n        <div className=\"content\">\n          <header>\n            <h1><strong>fanchat</strong> is a subscription-based messaging platform for influencers and their fans.</h1>\n          </header>\n          <Formik\n            initialValues={{ email: '' }}\n            validationSchema={emailSchema}\n            onSubmit={(values, actions) => {\n              actions.setSubmitting(true);\n              submit(values);\n              actions.setSubmitting(false);\n              setSubmitted(true);\n            }}\n          >\n            {({ handleChange, setFieldTouched, handleSubmit, isSubmitting, values, errors, touched }) => (\n              <form onSubmit={handleSubmit} noValidate=\"novalidate\" style={{display: 'flex', width: '100%', justifyContent: 'center'}}>\n                {\n                  !submitted ?\n                  <div style={{display: 'flex', flexDirection: 'column', width: '100%', alignItems: 'center'}}>\n                    <div className=\"formContainer\">\n                      <input\n                        type=\"email\"\n                        name=\"email\"\n                        placeholder=\"Enter email address\"\n                        onChange={handleChange}\n                        value={values.email}\n                      />\n                      <button type=\"submit\" disabled={isSubmitting}>\n                        Get Notified\n                      </button>\n                    </div>\n                    <div className=\"errorContainer\">\n                      {errors.email && touched.email ? <p className=\"errorText\">Invalid Email</p> : null}\n                    </div>\n                  </div>\n                  :\n                  <div className=\"registeredContainer\">\n                    <h2 className=\"registeredText\">Thank you for registering! We will reach out once early access is available.</h2>\n                  </div>\n                }\n              </form>\n            )}\n          </Formik>\n        </div>\n      </div>\n      <img src={phone} className=\"phone\" alt=\"fanchat application\" />\n      <img src={tilt} className=\"tilt\" alt=\"fanchat application\" />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}